// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ForgorPasswordUseCase is an autogenerated mock type for the ForgorPasswordUseCase type
type ForgorPasswordUseCase struct {
	mock.Mock
}

// CheckForgotPasswordHashIsExpire provides a mock function with given fields: hash
func (_m *ForgorPasswordUseCase) CheckForgotPasswordHashIsExpire(hash string) bool {
	ret := _m.Called(hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateForgotPasswordHash provides a mock function with given fields: email
func (_m *ForgorPasswordUseCase) CreateForgotPasswordHash(email string) (string, error) {
	ret := _m.Called(email)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MailHTML provides a mock function with given fields: view, data
func (_m *ForgorPasswordUseCase) MailHTML(view string, data interface{}) (string, error) {
	ret := _m.Called(view, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, interface{}) string); ok {
		r0 = rf(view, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(view, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: hash, password, rePassword
func (_m *ForgorPasswordUseCase) ResetPassword(hash string, password string, rePassword string) error {
	ret := _m.Called(hash, password, rePassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(hash, password, rePassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMail provides a mock function with given fields: domain, apikey, sender, subject, recipient, body
func (_m *ForgorPasswordUseCase) SendMail(domain string, apikey string, sender string, subject string, recipient string, body string) error {
	ret := _m.Called(domain, apikey, sender, subject, recipient, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) error); ok {
		r0 = rf(domain, apikey, sender, subject, recipient, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
