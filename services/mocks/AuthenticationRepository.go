// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/aofiee/barroth/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AuthenticationRepository is an autogenerated mock type for the AuthenticationRepository type
type AuthenticationRepository struct {
	mock.Mock
}

// CheckPasswordHash provides a mock function with given fields: m, password
func (_m *AuthenticationRepository) CheckPasswordHash(m *models.Users, password string) bool {
	ret := _m.Called(m, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.Users, string) bool); ok {
		r0 = rf(m, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: uuid
func (_m *AuthenticationRepository) DeleteToken(uuid string) error {
	ret := _m.Called(uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRoleNameByUserID provides a mock function with given fields: m, id
func (_m *AuthenticationRepository) GetRoleNameByUserID(m *models.TokenRoleName, id uint) error {
	ret := _m.Called(m, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TokenRoleName, uint) error); ok {
		r0 = rf(m, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: m, email
func (_m *AuthenticationRepository) Login(m *models.Users, email string) error {
	ret := _m.Called(m, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Users, string) error); ok {
		r0 = rf(m, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveToken provides a mock function with given fields: uuid, tokenUUID, expire
func (_m *AuthenticationRepository) SaveToken(uuid string, tokenUUID string, expire time.Duration) error {
	ret := _m.Called(uuid, tokenUUID, expire)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(uuid, tokenUUID, expire)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
